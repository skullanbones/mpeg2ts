#include <iostream>
#include <stdint.h>
#include <vector>

uint8_t testData[] = { 0x47, 0x40, 0x63, 0x15, 0x00, 0x02, 0xb0, 0x5b, 0x00, 0x01, 0xd1, 0x00, 0x00,
                       0xe0, 0x65, 0xf0, 0x00, 0x02, 0xe0, 0x65, 0xf0, 0x03, 0x52, 0x01, 0x01, 0x03,
                       0xe0, 0x69, 0xf0, 0x09, 0x0a, 0x04, 0x63, 0x7a, 0x65, 0x00, 0x52, 0x01, 0x0b,
                       0x03, 0xe0, 0x73, 0xf0, 0x09, 0x0a, 0x04, 0x65, 0x6e, 0x67, 0x00, 0x52, 0x01,
                       0x0c, 0x06, 0xe1, 0x2e, 0xf0, 0x25, 0x45, 0x1c, 0x01, 0x1a, 0xe7, 0xe8, 0xe9,
                       0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf4, 0xf5, 0xf6, 0xc7, 0xc8, 0xc9, 0xca,
                       0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd1, 0xd3, 0xd4, 0xd5, 0xd6, 0x56, 0x05, 0x65,
                       0x6e, 0x67, 0x09, 0x00, 0xad, 0x95, 0x17, 0xf2, 0xff, 0xff, 0xff, 0xff, 0xff,
                       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                       0xff, 0xff, 0xff, 0xff, 0xff, 0xff };

uint64_t getBits(uint8_t requestedBits)
{
    static uint8_t numStoredBits = 0;
    static uint8_t bitStore = 0;
    static uint8_t srcInx = 0;

    uint64_t ret = 0;

    while (requestedBits)
    {
        uint8_t bitsToFromStore = numStoredBits > requestedBits ? requestedBits : numStoredBits;
        ret = (ret << bitsToFromStore) | (bitStore >> (8 - bitsToFromStore));

        requestedBits -= bitsToFromStore;
        numStoredBits -= bitsToFromStore;
        bitStore <<= bitsToFromStore;

        if (numStoredBits == 0)
        {
            numStoredBits = 8;
            bitStore = testData[srcInx++];
        }
    }

    return ret;
};

int main()
{
#if BYTE_ORDER == ORDER_LITTLE_ENDIAN
    std::cout << "litte\n";
    // 6340
    // 1563
    // 156340
    // 5bb00200156340
#else
    std::cout << "big\n";
    // 4063
    // 6315
    // 40631500
    // 4063150002b05b00
#endif
    std::cout << std::hex << *((uint16_t*)&testData[1]) << "\n";
    std::cout << std::hex << *((uint16_t*)&testData[2]) << "\n";

    std::cout << std::hex << *((uint32_t*)&testData[1]) << "\n";
    std::cout << std::hex << *((uint64_t*)&testData[1]) << "\n";

    std::cout << std::hex << getBits(8) << " " << 0x47 << "\n";
    std::cout << std::hex << getBits(1) << " " << 0 << "\n";
    std::cout << std::hex << getBits(1) << " " << 1 << "\n";
    std::cout << std::hex << getBits(1) << " " << 0 << "\n";
    std::cout << std::hex << getBits(13) << " " << 0x63 << "\n";
    std::cout << std::hex << getBits(2) << " " << 0 << "\n";
    std::cout << std::hex << getBits(2) << " " << 1 << "\n";
    std::cout << std::hex << getBits(4) << " " << 5 << "\n";

    return 0;
}
